generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      Role     @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses Address[]
  orders    Order[]
  reviews   Review[]
  wishlist  Wishlist[]
  cart      CartItem[]
  products  Product[] @relation("SellerProducts")
  deliveryOrders Order[] @relation("DeliveryOrders")
  deliveryLocation DeliveryLocation? @relation("DeliveryLocation")

  @@map("users")
}

model Address {
  id       String  @id @default(cuid())
  userId   String
  name     String
  phone    String
  address  String
  city     String
  state    String
  pincode  String
  landmark String?
  isDefault Boolean @default(false)

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Decimal  @db.Decimal(10, 2)
  mrp         Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  brand       String
  model       String?
  sku         String   @unique
  images      String[]
  specifications Json?
  features    String[]
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  
  // Deal fields
  isDeal      Boolean  @default(false)
  dealPrice   Decimal? @db.Decimal(10, 2)
  dealEndDate DateTime?
  dealDescription String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  
  sellerId String?
  seller   User?   @relation("SellerProducts", fields: [sellerId], references: [id])

  // Relations
  reviews   Review[]
  wishlist  Wishlist[]
  cartItems CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  userId        String
  addressId     String
  deliveryPartnerId String?
  totalAmount   Decimal     @db.Decimal(10, 2)
  shippingFee   Decimal     @db.Decimal(10, 2) @default(0)
  discount      Decimal     @db.Decimal(10, 2) @default(0)
  finalAmount   Decimal     @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  orderStatus   OrderStatus   @default(PENDING)
  couponCode    String?
  notes         String?
  trackingNumber String?
  estimatedDelivery DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user            User    @relation(fields: [userId], references: [id])
  address         Address @relation(fields: [addressId], references: [id])
  deliveryPartner User?   @relation("DeliveryOrders", fields: [deliveryPartnerId], references: [id])

  // Relations
  items    OrderItem[]
  payments Payment[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  amount          Decimal       @db.Decimal(10, 2)
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?
  gatewayResponse Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @db.SmallInt
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Coupon {
  id          String     @id @default(cuid())
  code        String     @unique
  description String?
  type        CouponType
  value       Decimal    @db.Decimal(10, 2)
  minAmount   Decimal?   @db.Decimal(10, 2)
  maxDiscount Decimal?   @db.Decimal(10, 2)
  usageLimit  Int?
  usedCount   Int        @default(0)
  isActive    Boolean    @default(true)
  validFrom   DateTime
  validUntil  DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("coupons")
}

model DeliveryLocation {
  id                String   @id @default(cuid())
  deliveryPartnerId String   @unique
  latitude          Float
  longitude         Float
  lastUpdated       DateTime @default(now())
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  deliveryPartner User @relation("DeliveryLocation", fields: [deliveryPartnerId], references: [id], onDelete: Cascade)

  @@map("delivery_locations")
}

enum Role {
  CUSTOMER
  ADMIN
  SELLER
  DELIVERY
}

enum PaymentMethod {
  COD
  DEBIT_CARD
  CREDIT_CARD
  UPI
  NET_BANKING
  WALLET
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURNED
}

enum CouponType {
  PERCENTAGE
  FIXED
}